)
ggplotly(
ggplot(df_FL) +
geom_boxplot(aes(y = population))
)
require(rgdal)
require(leaflet)
require(leaflet.extras)
require(dplyr)
require(readxl)
require(stringr)
require(raptr)
require(PBSmapping)
require(ggplot2)
require(plotly)
library(knitr)
# Load FL eviction data. Source: https://data-downloads.evictionlab.org/
FL_counties <- readOGR("FL_eviction_counties.geojson")
#View(FL_counties@data)
FL_16 <- FL_counties
# Select only 2016 data and rename columns
FL_16@data <- FL_counties@data %>%
dplyr::select(GEOID, west, east, north, south, n, pl, ends_with("16")) %>%
rename(county = n, state = pl)
#View(FL_16@data)
colnames(FL_16@data) <- c("GEOID", "west", "east", "north", "south", "county", "state",
"population", "poverty_rate", "renter_occ_households", "pct_renter",
"median_gross_rent", "median_income", "median_property_val",
"rent_burden", "pct_white", "pct_af_am", "pct_hispanic", "pct_am_ind",
"pct_asian", "pct_nh", "pct_multiple", "pct_other",
"eviction_filings", "evictions", "eviction_rate", "evic_filing_rate",
"low_flag", "imputed", "sub")
# Add lat and long to the dataset
# Calculate centroids of counties to find lat and long
FL_polyset <- SpatialPolygons2PolySet(x = FL_16)
centroid <- calcCentroid(FL_polyset, rollup = 1) %>%
rename(lat = Y, long = X)
# Bind county centroids to Florida data
FL_16@data <- cbind(FL_16@data, centroid)
# Data types
#sapply(FL_16@data, typeof)
FL_16@data$county <- as.factor(FL_16@data$county)
ggplotly(
ggplot(df_FL) +
geom_boxplot(aes(population)) +
coord_flip()
)
df_FL <- FL_16@data
ggplotly(
ggplot(df_FL) +
geom_boxplot(aes(population)) +
coord_flip()
)
ggplotly(
ggplot(df_FL, aes(population)) +
geom_boxplot() +
coord_flip()
)
ggplotly(
ggplot(df_FL, aes(population)) +
geom_boxplot()
)
ggplotly(
ggplot(df_FL, aes(y = population)) +
geom_boxplot()
)
ggplotly(
ggplot(df_FL, aes(y = population)) +
geom_boxplot() +
coord_flip()
)
ggplotly(
ggplot(df_FL, aes(x = 1, y = population)) +
geom_boxplot() +
coord_flip()
)
ggplotly(
ggplot(df_FL, aes(x = 1, y = population)) +
geom_boxplot()
)
ggplotly(
ggplot(df_FL, aes(x = 1, y = population)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.x = blank(),
axis.text.x = blank(),
axis.ticks.x = blank())
)
ggplotly(
ggplot(df_FL, aes(x = 1, y = population)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
)
ggplotly(
ggplot(df_FL, aes(x = 1, y = population)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
# add indicator if county has # evictions greater than the mean
FL_16@data <- FL_16@data %>%
mutate(above_avg_evic = ifelse(evictions > mean(evictions),
"Above Average", "Below Average"))
View(FL_16@data)
mean(FL_16@data$evictions, na.rm)
#View(FL_counties@data)
FL_16 <- FL_counties
# Select only 2016 data and rename columns
FL_16@data <- FL_counties@data %>%
dplyr::select(GEOID, west, east, north, south, n, pl, ends_with("16")) %>%
rename(county = n, state = pl)
#View(FL_16@data)
colnames(FL_16@data) <- c("GEOID", "west", "east", "north", "south", "county", "state",
"population", "poverty_rate", "renter_occ_households", "pct_renter",
"median_gross_rent", "median_income", "median_property_val",
"rent_burden", "pct_white", "pct_af_am", "pct_hispanic", "pct_am_ind",
"pct_asian", "pct_nh", "pct_multiple", "pct_other",
"eviction_filings", "evictions", "eviction_rate", "evic_filing_rate",
"low_flag", "imputed", "sub")
# Add lat and long to the dataset
# Calculate centroids of counties to find lat and long
FL_polyset <- SpatialPolygons2PolySet(x = FL_16)
centroid <- calcCentroid(FL_polyset, rollup = 1) %>%
rename(lat = Y, long = X)
# Bind county centroids to Florida data
FL_16@data <- cbind(FL_16@data, centroid)
# Data types
#sapply(FL_16@data, typeof)
FL_16@data$county <- as.factor(FL_16@data$county)
mean(FL_16@data$evictions)
mean(FL_16@data$evictions, na.rm)
mean(FL_16@data$evictions, na.rm())
mean(FL_16@data$evictions, na.rm = TRUE)
# add indicator if county has # evictions greater than the mean
FL_16@data <- FL_16@data %>%
mutate(above_avg_evic = ifelse(evictions > mean(evictions, na.rm = TRUE),
"Above Average", "Below Average"))
View(FL_16@data)
df_FL <- FL_16@data
ggplotly(
ggplot(df_FL, aes(x = above_avg_evic, y = population)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
ggplotly(
ggplot(df_FL, aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
ggplotly(
ggplot(df_FL[,evictions != "NA"], aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
ggplotly(
ggplot(df_FL[,"evictions" != "NA"], aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
ggplotly(
ggplot(df_FL[[is.na(above_avg_evic)]], aes(x = above_avg_evic, y = population, fill = above_avg_evic) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
)
ggplotly(
ggplot(df_FL[[is.na("above_avg_evic")]], aes(x = above_avg_evic, y = population, fill = above_avg_evic) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
)
ggplotly(
ggplot(subset(df_FL, !is.na(above_avg_evic)), aes(x = above_avg_evic, y = population, fill = above_avg_evic) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
)
df_FL_subset <- !is.na(df_FL$above_avg_evic)
df_FL_subset <- df_FL[!is.na(df_FL$above_avg_evic), ]
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = population, fill = above_avg_evic) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
)
ggplotly(
ggplot(df_FL, aes(x = above_avg_evic, y = population, fill = above_avg_evic) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
)
ggplotly(
ggplot(df_FL, aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
)
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
labs("New Title")
)
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = population, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
guides(fill = guide_legend("New title"))
)
shiny::runApp()
runApp()
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = median_income, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
guides(fill = guide_legend("Number of Evictions"))
)
runApp()
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = median_income, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlim(min(median_income), max(median_income)) +
guides(fill = guide_legend("Number of Evictions"))
)
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = median_income, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
xlim(min(df_FL_subset$median_income), max(df_FL_subset$median_income)) +
guides(fill = guide_legend("Number of Evictions"))
)
ggplotly(
ggplot(df_FL_subset, aes(x = above_avg_evic, y = median_income, fill = above_avg_evic)) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_x_continuous(c(min(df_FL_subset$median_income), max(df_FL_subset$median_income))) +
guides(fill = guide_legend("Number of Evictions"))
)
min(df_FL$median_gross_rent)
test1 <- df_FL %>%
select(input$var1, above_avg_evic) %>%
!is.na(above_avg_evic)
test1 <- df_FL %>%
select(population, above_avg_evic) %>%
!is.na(above_avg_evic)
View(df_FL)
test1 <- df_FL %>%
select(population, above_avg_evic) %>%
!is.na(above_avg_evic)
test1 <- df_FL %>%
select(population, above_avg_evic) %>%
filter(!is.na(above_avg_evic))
runApp()
runApp()
runApp()
runApp()
test1 <- df_FL %>%
select(population, above_avg_evic) %>%
filter(!is.na(above_avg_evic))
ggplotly(
ggplot(test1, aes_string(x = "above_avg_evic", y = "median_income", fill = "above_avg_evic")) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
scale_x_continuous(c(min(df_FL_subset$median_income), max(df_FL_subset$median_income))) +
guides(fill = guide_legend("Number of Evictions"))
)
ggplotly(
ggplot(test1, aes_string(x = "above_avg_evic", y = "median_income", fill = "above_avg_evic")) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
guides(fill = guide_legend("Number of Evictions"))
)
ggplotly(
ggplot(test1, aes_string(x = "above_avg_evic", y = "population", fill = "above_avg_evic")) +
geom_boxplot() +
coord_flip() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()) +
guides(fill = guide_legend("Number of Evictions"))
)
runApp()
runApp()
runApp()
runApp()
mean(df_FL$lat)
mean(df_FL$long)
leaflet() %>% setView(lng = mean(df_FL$long), lat = mean(df_FL$lat), zoom = 5)
leaflet() %>% setView(lng = mean(df_FL$long), lat = mean(df_FL$lat), zoom = 1)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_fl[["population"]]
df_FL[["population"]]
unique(df_FL$county)
runApp()
runApp()
runApp()
runApp()
runApp()
listTest <- colnames(df_FL)
listTest <- list(colnames(df_FL))
View(listTest)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test1 <- df_FL %>% select(evictions, poverty_rate)
library(corrplot)
corrplot(test1, method = "number")
# Dataset from http://archive.ics.uci.edu/ml/datasets/Heart+Disease
df_heart <- read.csv("~/Documents/Independent Study ISLE/processed.cleveland.txt",
header=FALSE)
colnames(df_heart) <- c("age", "sex", "chest_pain_type", "resting_bp", "cholesterol",
"fast_blood_sugar", "rest_ecg",  "max_heart_rt", "ex_angina",
"st_depression", "slope_st", "num_vessels_fluor",
"defect", "target_val")
summary(df_heart)
sapply(df_heart, typeof)
# Recode categorical variables as factors
df_heart$sex <- as.factor(df_heart$sex)
df_heart$chest_pain_type <- as.factor(df_heart$chest_pain_type)
df_heart$fast_blood_sugar <- as.factor(df_heart$fast_blood_sugar)
df_heart$ex_angina <- as.factor(df_heart$ex_angina)
df_heart$defect <- as.factor(df_heart$defect)
df_heart$rest_ecg <- as.factor(df_heart$rest_ecg)
df_heart$slope_st <- as.factor(df_heart$slope_st)
df_heart$target_val <- as.factor(df_heart$target_val)
df_heart$num_vessels_fluor <- as.numeric(df_heart$num_vessels_fluor)
# Set heart disease indicator (target) as 0/1
df_heart$target <- ifelse(df_heart$target_val == 0, 0, 1)
df_heart$target <- factor(df_heart$target)
# Check correlations between numeric variables
# We observe minimal correlation
num_index <- sapply(df_heart, is.numeric)
df_heart_numCols <- df_heart[, num_index]
corr <- round(cor(df_heart_numCols), 2)
corrplot(corr, method = "number")
corrcorr
corr
cor(df_FL$evictions, df_FL$median_gross_rent)
cor(df_FL$evictions, df_FL$median_gross_rent, na.rm = T)
cor(x = df_FL$population, y = df_FL$poverty_rate)
cor(x = df_FL$population, y = df_FL$poverty_rate, use = complete.obs)
cor(x = df_FL$population, y = df_FL$poverty_rate, use = "complete.obs")
cor(x = df_FL$evictions, y = df_FL$poverty_rate, use = "complete.obs")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df_FL)
runApp()
runApp()
runApp()
rm(list = ls())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Load FL eviction data. Source: https://data-downloads.evictionlab.org/
FL_counties <- readOGR("FL_eviction_counties.geojson")
FL_16 <- FL_counties
# Select only 2016 data and rename columns
FL_16@data <- FL_counties@data %>%
dplyr::select(GEOID, west, east, north, south, n, pl, ends_with("16")) %>%
rename(county = n, state = pl)
colnames(FL_16@data) <- c("GEOID", "west", "east", "north", "south", "county", "state",
"population", "poverty_rate", "renter_occupied_households", "pct_renter",
"median_gross_rent", "median_income", "median_property_value",
"rent_burden", "pct_white", "pct_af_am", "pct_hispanic", "pct_am_ind",
"pct_asian", "pct_nh", "pct_multiple", "pct_other",
"eviction_filings", "evictions", "eviction_rate", "evic_filing_rate",
"low_flag", "imputed", "sub")
# Add lat and long to the dataset
# Calculate centroids of counties to find lat and long
FL_polyset <- SpatialPolygons2PolySet(x = FL_16)
centroid <- calcCentroid(FL_polyset, rollup = 1) %>%
rename(lat = Y, long = X)
# Bind county centroids to Florida data
FL_16@data <- cbind(FL_16@data, centroid)
# Change rates into true rates by dividing by 100; also change some column types
FL_16@data$county <- as.factor(FL_16@data$county)
FL_16@data$eviction_rate <- round(FL_16@data$eviction_rate/100, 4)
FL_16@data$poverty_rate <- round(FL_16@data$poverty_rate/100, 4)
FL_16@data$evic_filing_rate <- round(FL_16@data$evic_filing_rate/100, 4)
FL_16@data$renter_occ_households <- as.numeric(FL_16@data$median_property_val)
FL_16@data$median_property_val <- as.numeric(FL_16@data$median_property_val)
# Add indicator if county has # evictions greater than the mean, for use in boxplot
FL_16@data <- FL_16@data %>%
mutate(above_avg_evic = ifelse(evictions > mean(evictions, na.rm = TRUE),
"Above Average", "Below Average"))
# Rename dataframe for ease of use, and alphabetize
df_FL <- FL_16@data %>% arrange(county)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(stringr)
library(tools)
runApp()
runApp()
runApp()
df_FL[["evictions"]]
!is.na(df_FL[["evictions"]])
runApp()
runApp()
runApp()
